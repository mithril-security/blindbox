name: Main Tests

on:
  push:
    paths:
      - 'client/**'
      - 'examples/**'
  workflow_dispatch:
permissions:
  contents: write
jobs:
  coverage-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.10", "3.9"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install lsb-release

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pypi dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install aiohttp requests jwt coverage pyyaml pydantic rich inquirer

      - name: Coverage testing
        run: |
          cd client/ && ./tests/pythonpath.env
          python ./tests/demo_server.py & sleep 1
          python -m coverage run --source . --omit="*test*,*__*" -m unittest tests/test*.py
          python -m coverage report
          python -m coverage xml -o ./tests/blindbox_coverage.xml

      - name: Coverage report
        if: matrix.python-version == '3.9'
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.TOKEN }}
          commit_message: Auto-sync coverage report

  cli-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.10", "3.9"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apt-get update && apt-get -y install wget gpg lsb-release curl gnupg

          # Install HashiCorp repository key
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

          # Install Docker repository key
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install required packages
          sudo apt-get update && sudo apt-get -y install terraform docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pypi dependencies
        run: |
          python -c "import sys; print('Python version:', sys.version)"
          python -m pip install --upgrade pip
          python -m pip install pydantic inquirer rich pyyaml

      - name: Client build
        run: |
          cd client
          python -m pip install --upgrade build && python -m build --wheel
          python -m pip install dist/$(ls dist)

      - name: Whisper blindbox init
        run: |
          cd examples/whisper/
          docker build -t whisper:latest .
          mkdir build && cd build
          blindbox --platform azure-sev init
          blindbox build -t whisper-blindbox:v1 --source-image whisper
          echo -e "Blindbox.tf Terraform\n" && cat blindbox.tf
          echo -e "Blindbox.yml YAML\n" && cat blindbox.yml

      - name: Hello-world blindbox init
        run: |
          cd examples/hello-world/
          docker build -t helloworld:latest .
          mkdir build && cd build
          blindbox --platform azure-sev init
          blindbox build -t helloworld-blindbox:v1 --source-image helloworld
          echo -e "Blindbox.tf Terraform\n" && cat blindbox.tf
          echo -e "Blindbox.yml YAML\n" && cat blindbox.yml

      - name: Santacoder blindbox init
        run: |
          cd examples/santacoder/
          docker build -t santacoder:latest .
          mkdir build && cd build
          blindbox --platform azure-sev init
          blindbox build -t santacoder-blindbox:v1 --source-image santacoder
          echo -e "Blindbox.tf Terraform\n" && cat blindbox.tf
          echo -e "Blindbox.yml YAML\n" && cat blindbox.yml
